@typeparam TItem
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

<table @attributes="@TableAttributes">
    <colgroup>
        @foreach (var column in VisibleColumns)
        {
            if (string.IsNullOrEmpty(column.Width))
            {
                <col />
            }
            else
            {
                <col style="width: @column.Width" />
            }
        }
    </colgroup>
    <thead>
        <tr>
            @foreach (var column in VisibleColumns)
            {
                <th @key="column" class="@column.HeaderClass">
                    <div @attributes="@column.HeaderAttributes"
                         @onclick="() => SortByAsync(column)"
                         @onkeydown="() => SortByAsync(column)">
                        @if (column.HeaderTemplate != null)
                        {
                            @column.HeaderTemplate
                        }
                        else
                        {
                            @column.RenderHeader()
                        }

                        @if (column.Sortable && column.SortIndex >= 0)
                        {
                            <span class="data-grid-header-sort-icon">
                                @if (column.SortDescending)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
                                        <path d="M7.247 4.86l-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
                                        <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                                    </svg>
                                }
                            </span>
                        }
                    </div>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @if (View == null)
        {
            @if (LoadingTemplate != null)
            {
                @LoadingTemplate
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <tr @key="i">
                        @foreach (var column in VisibleColumns)
                        {
                            <td @key="column" class="@column.ClassName">
                                <Skeleton />
                            </td>
                        }
                    </tr>
                }
            }
        }
        else
        {
            <Virtualize TItem="TItem"
                        Items="View"
                        Context="item"
                        ItemSize="VirtualItemSize"
                        OverscanCount="VirtualOverscan">
                <tr @key="item" class="@RowClass" style="@(RowStyle?.Invoke(item))">
                    @foreach (var column in VisibleColumns)
                    {
                        <td @key="column" class="@column.ClassName" style="@(column.Style?.Invoke(item))">
                            @if (column.Template != null)
                            {
                                @column.Template(item)
                            }
                            else
                            {
                                @column.RenderCell(item)
                            }
                        </td>
                    }
                </tr>
            </Virtualize>
        }

    </tbody>
</table>
<CascadingValue IsFixed="true" Value="this" Name="Grid">
    @ChildContent
</CascadingValue>